nextflow_process {

    name "Test Process DEEPVARIANT_CALLVARIANTS"
    script "../main.nf"
    process "DEEPVARIANT_CALLVARIANTS"

    tag "deepvariant/callvariants"
    tag "deepvariant"
    tag "modules"
    tag "modules_nfcore"

    test("homo_sapiens - wgs") {
        setup {
            run("DEEPVARIANT_MAKEEXAMPLES") {
                script "../../makeexamples/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'test', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                        []
                    ]
                    input[1] = [
                        [ id:'genome'],
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                    ]
                    input[2] = [
                        [ id:'genome'],
                        file(params.modules_testdata_base_path + '/genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                    ]
                    input[3] = [
                        [],[]
                    ]
                    """
                }
            }
        }
        when {
            process {
                """
                input[0] = DEEPVARIANT_MAKEEXAMPLES.out.examples
                input[1] = [
                    "wgs" // select model
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.call_variants_tfrecords.get(0).get(1) == [ id:'test', single_end:false ] },
                // The make_examples_id and the tfrecord binary representation are not stable, though the variant calls are.
                // We can't snapshot the calls tfrecord. See deepvariant subworkflow test and postprocessvariants test.
                { assert process.out.call_variants_tfrecords.get(0).get(2) != null },
                { assert snapshot(process.out.versions).match("versions") },
            )
        }
    }

    test("homo_sapiens - wgs - stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    'dummy_unique_id', // make_examples_id
                    [ id:'test', single_end:false ], // meta
                    "dummy_filename.tfrecord@2.gz",
                    [] // we don't really need to give any input files for the stub test
                ]
                input[1] = [
                    "wgs" // model
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
